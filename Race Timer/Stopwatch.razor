
@implements IDisposable  // Implementerar IDisposable för att frigöra resurser

<div>   
    <h1>
        @if (!hidden)
        {
            @formattedTime
        }
        </h1>
</div> 


@code {
    public bool isRunning; // Indikerar om stoppuret är aktivt
    private System.Timers.Timer timer = new System.Timers.Timer(); // Timer för att räkna upp tiden

    // Formaterar tiden till hh:mm:ss.ff för att inkludera millisekunder
    private string formattedTime => TimeSpan.FromSeconds(elapsedTime).ToString(@"hh\:mm\:ss\.ff");

    [Parameter] public bool hidden { get; set; } = true;

    private DateTime savedTimestamp;
    public float elapsedTime = 0;

    public void Start()
    {
        savedTimestamp = DateTime.Now; // Spara den aktuella tidpunkten
        elapsedTime = 0; // Återställ förfluten tid
        StartTimer(); // Starta timern
    }

    private void StartTimer()
    {
        timer = new System.Timers.Timer(10); // Timern tickar varje sekund
        timer.Elapsed += UpdateElapsedTime; // Koppla metoden som ska köras
        timer.Start(); // Starta timern
    }

    private void UpdateElapsedTime(object sender, System.Timers.ElapsedEventArgs e)
    {
        var timeSpan = DateTime.Now - savedTimestamp; // Beräkna förfluten tid
        elapsedTime = (float)timeSpan.TotalSeconds; // Formatera förfluten tid
        InvokeAsync(StateHasChanged); // Uppdatera UI
    }

    public void Dispose()
    {
        timer?.Dispose(); // Frigör timern om den existerar
    }

}
